name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Create test database directory
      run: mkdir -p data
    
    - name: Run tests
      run: |
        pytest --tb=short -v
      env:
        DATABASE_URL: sqlite:///./data/test.db
        EMAIL_ADDRESS: test@example.com
        EMAIL_PASSWORD: test_password
        SMTP_SERVER: smtp.example.com
        SMTP_PORT: 587

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
    
    - name: Run black
      run: black --check .
    
    - name: Run isort
      run: isort --check-only .
    
    - name: Run flake8
      run: flake8 app/ --max-line-length=88 --extend-ignore=E203,W503

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t voyager2-reminder .
    
    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 8080:8080 \
          -e EMAIL_ADDRESS=test@example.com \
          -e EMAIL_PASSWORD=test_password \
          -e SMTP_SERVER=smtp.example.com \
          -e SMTP_PORT=587 \
          voyager2-reminder
        sleep 10
        curl -f http://localhost:8080/users || exit 1
        docker stop test-container

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Fly.io CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Deploy to Fly.io
      run: flyctl deploy --remote-only
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }} 